__author__ = 'gyz'
# _*_ coding: UTF-8 _*_
import openpyxl
import os,re
import pathlib
def get_type_version():
    demo = r'''
    Main Area     eNodeB            BTS3900_5900 V100R017C00SPC120B178  Available        2020-12-09 16:41:33
    '''
    #search 捕获命名组，不在命名组内的部分也捕获，
    #findall捕获命名组，不在命名组内的部分，不捕获,返回值为列表,元素为元组
    res1 = re.search(r'main area\s+(?P<btstype>[eg]nodeb)\s+\w+\s+v100(?P<version>r\d{3})\w+\s+available',demo,re.I)
    print(res1)
    # <re.Match object; span=(1, 78), match='Main Area     eNodeB            BTS3900_5900 V100>
    print(res1.group(0))
    # Main Area     eNodeB            BTS3900_5900 V100R017C00SPC120B178  Available
    print(res1.groups())
    #('eNodeB', 'R017')
    print(res1.groups()[0])
    # eNodeB
    print(res1.groups()[1])
    # R017

    res2 = re.findall(r'main area\s+(?P<btstype>[eg]nodeb)\s+\w+\s+v100(?P<version>r\d{3})\w+\s+available',demo,re.I)
    print(res2)
    # [('eNodeB', 'R017')]
    print(res2[0])
    # ('eNodeB', 'R017')
    print(res2[0][0])
    # eNodeB
    print(res2[0][1])
    # R017

def get_esn():
    esn_demo = r'ESN  =  2102310WYG6TF1915394'
    res3 = re.findall(r'esn\s+=\s+(?P<esn>\d{7}\w{7}\d{6})',esn_demo,re.I)
    print(res3[0])
    # 2102310WYG6TF1915394

def get_edate():
    effictive_date_demo = r'''
    Info of NE License
    ------------------
    Operator Index  Operator Name  Item Type  Model         Description

    65535           SHARED         NULL       SHARED  SHARED          66666      0       0            asdf  2022-02-24
    65535           SHARED         NULL       SHARED  SHARED          66666      0       0            asdf  2022-02-24
    65535           SHARED         NULL       SHARED  SHARED          66666      0       0            asdf  2022-02-24
    65535           SHARED         NULL       SHARED  SHARED          66666      0       0            asdf  2022-02-24
    65535           SHARED         NULL       SHARED  SHARED          66666      0       0            asdf  2022-02-24
    65535           SHARED         NULL       SHARED  SHARED          66666      0       0            asdf  2022-02-24
    65535           SHARED         NULL       SHARED  SHARED          66666      0       0            asdf  2022-02-24
    65535           SHARED         NULL       SHARED  SHARED          66666      0       0            asdf  2022-02-24
    65535           SHARED         NULL       SHARED  SHARED          66666      0       0            asdf  2022-02-24
    65535           SHARED         NULL       SHARED  SHARED          66666      0       0            asdf  2022-02-24
    65535           SHARED         NULL       SHARED  SHARED          66666      0       0            asdf  2022-02-24
    65535           SHARED         NULL       SHARED  SHARED          66666      0       0            asdf  2022-02-24
    65535           SHARED         NULL       SHARED  SHARED          66666      0       0            asdf  2022-02-24
    65535           SHARED         NULL       SHARED  SHARED          66666      NULL    0            asdf  2022-02-24
    65535           SHARED         NULL       SHARED  SHARED          66666      NULL    0            asdf  2022-02-24

    '''
    res4 = re.search(r'65535.+(?P<e_date>\d{4}-\d{2}-\d{2})\s+',effictive_date_demo,re.I)
    print(res4.groups())
    # ('2022-02-24',)
    print(res4.groups()[0])
    # 2022-02-24

    res5 = re.findall(r'65535.+(?P<e_date>\d{4}-\d{2}-\d{2})\s+',effictive_date_demo,re.I)
    print(res5)
    # ['2022-02-24', '2022-02-24', '2022-02-24', '2022-02-24', '2022-02-24', '2022-02-24', '2022-02-24', '2022-02-24', '2022-02-24', '2022-02-24', '2022-02-24', '2022-02-24', '2022-02-24']
def get_plmn():
    multi_plmn = r'''
%%LST CNOPERATOR:;%%
RETCODE = 0  Operation succeeded.

List CN Operator
----------------
CN Operator ID  CN Operator name  CN Operator type    Mobile country code  Mobile network code  PLMN Mode    Operator Function Switch

0               33026             Primary Operator    330                  26                   NULL         CELL_TRAFFIC_TRACE_MSG_SWITCH:On&DCN_SUPPORT_SWITCH:Off&MME_STRICT_SELECTION_SWITCH:Off&CMAS_BROADCAST_SWITCH:On&ARP_QCI_BASED_DIFF_SCH_SW:Off&UPPER_LYR_IND_NO_BROADCAST_SW:Off
1               PLMN              Secondary Operator  460                  11                   NORMAL_PLMN  CELL_TRAFFIC_TRACE_MSG_SWITCH:On&DCN_SUPPORT_SWITCH:Off&MME_STRICT_SELECTION_SWITCH:Off&CMAS_BROADCAST_SWITCH:On&ARP_QCI_BASED_DIFF_SCH_SW:Off&UPPER_LYR_IND_NO_BROADCAST_SW:Off
(Number of results = 2)
    '''
    plmn_demo = r'''
    List CN Operator
    ----------------
              CN Operator ID  =  0
            CN Operator name  =  46060
            CN Operator type  =  Primary Operator
         Mobile country code  =  460
         Mobile network code  =  60
                   PLMN Mode  =  NULL
    '''
    plmn = re.findall(r'mobile\s+country\s+code.+(?P<mcc>\d{3})\s+mobile\s+network\s+code.+(?P<mnc>\d{2})',plmn_demo,re.I)
    print(plmn)
    # [('460', '60')]
    print(plmn[0][0]+plmn[0][1])

get_type_version()



#!/usr/bin
# _*_ coding: UTF-8 _*_
# Copyright (c) 2021 GengYu.All rights reserved
# @Create By g84114734
# @Create_time: 2021/12/15
# @File Name: re_test
# 打包命令pyinstaller -F package\re_test
"""
这个模块提供了

"""
__author__ = 'gyz'
import re
# 正则表达式的自定义命名分组,(?P<name>pattern)
# 一个正则表达式可以有多个自定义名称的分组，可以能过分组名称提取到匹配的字符串
# 每一个分组定义是(?P<自定义分组名称>正则字符串)
# 例如
# pattern=r'正则1(?P<组1>组1正则)正则2(?P<组2>组2正则)正则3(?P<组3>组3正则)'



str = '''
oracle:500,
java:1550,
php:500,
<oracle>500</oracle>
<java>1550</java>
<java>5000</java>
'''
'''
捕获命名组，不在命名组内的部分，不捕获
'''
 # (?P<name>...) 定义一个命名组，(?P=name) 则是对命名组的逆向引用
s1 = re.findall(r'\D+:(?P<group_name>\d+)',str,re.I|re.S)
s2 = re.findall(r">(?P<data>\d+)<",str,re.I|re.S)
s3 = re.findall(r">(?:\d+)</(\w+)>",str,re.I|re.S)
print(s1)
#['500', '1550', '500']
print(s2)
#['500', '1550', '5000']
print(s3)
#['oracle', 'java', 'java']

'''
group和groups是两个不同的函数。

一般m.group(N) 返回第N组括号匹配的字符。
而m.group() == m.group(0) == 所有匹配的字符，与括号无关，这个是API规定的。

m.groups() 返回所有括号匹配的字符，以tuple格式（元组格式），不包括m.group(0)，即整个表达式。
m.groups() == (m.group(0), m.group(1), ...)
'''
# 正则表达式中，group（）用来提取分组截获的字符串
# 有时你想用一个组去收集正则表达式的一部分，但又对组的内容不感兴趣。你可以用一个无捕获组: (?:pattern) 来实现这项功能
# (?:pattern) ： 匹配pattern，但不捕获匹配结果
p = re.findall(r"(?:[abc])+\d+","abc963")
print(p)
#['abc963']
n = re.search("(?:[abc])+","abc963")
print(n.group())
#abc
m = re.search("(?:[abc])+(\d+)","abc963")
print(m.group())
#abc963
print(m.groups())
#('963',)
