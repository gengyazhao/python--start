__author__ = 'gyz'
# _*_ coding: UTF-8 _*_
# @create_time:2021/11/18
# @File: python_dict
# 打包命令pyinstaller -F package\python_dict
#
__author__ = 'gyz'
'''
字典是另一种可变容器模型，且可存储任意类型对象。
字典的每个键值 key=>value 对用冒号 : 分割，每个对之间用逗号(,)分割，整个字典包括在花括号 {} 中 ,格式如下所示：
d = {key1 : value1, key2 : value2, key3 : value3 }
不允许同一个键出现两次。创建时如果同一个键被赋值两次，后一个值会被记住
键必须不可变，所以可以用数字，字符串或元组充当，而用列表就不行
emptyDict = {}      使用大括号 { } 创建空字典
emptyDict = dict()  使用内建函数 dict() 重建字典

len(dict)       计算字典元素个数，即键的总数。
str(dict)       输出字典，可以打印的字符串表示。
radiansdict.clear()     删除字典内所有元素
radiansdict.copy()      返回一个字典的浅复制
radiansdict.fromkeys(seq, value)  创建一个新字典，以序列seq中元素做字典的键，value为字典所有键对应的初始值
radiansdict.get(key, default=None)      返回指定键的值，如果键不在字典中返回 default 设置的默认值
key in dict             如果键在字典dict里返回true，否则返回false
radiansdict.items()     以列表返回一个视图对象
radiansdict.keys()      返回一个视图对象
radiansdict.values()    返回一个视图对象
radiansdict.setdefault(key, default=None)       和get()类似, 但如果键不存在于字典中，将会添加键并将值设为default
radiansdict.update(dict2)       把字典dict2的键/值对更新到dict里
pop(key[,default])              删除字典给定键 key 所对应的值，返回值为被删除的值。key值必须给出。 否则，返回default值。
popitem()               随机返回并删除字典中的最后一对键和值。

'''
list1 = ['eg1','eg2']
#访问字典里的值
dict1 = {'gyz':'gengyazhao'}
print(dict1['gyz'])
#更新信息
dict1['gyz'] = 'huawei.com'
print(dict1['gyz'])
#添加信息
dict1['bd'] = 'baidu.com'
print(dict1['bd'])
dict2 = dict1.copy()
#删除字典元素
del dict1['gyz']
#清空字典
dict1.clear()
#删除字典
del dict1

print(dict2.keys())
print(dict2.values())
print(dict2.items())
dict3 = dict2.fromkeys(dict2,'qq.com')
print(dict3.keys())
print(dict3.values())

dict4 = dict.fromkeys(list1)
print(dict4.keys())
dict2.update(dict4)
print(dict2.keys())
print(dict2.values())




#使用变量调用字典，
__author__ = 'g84114734'
# _*_ coding: UTF-8 _*_
# @CreateTime: 2020/3/3010:04
# @File: Change_plmn
#pyinstaller -F Change_plmn_V0.03.py
__author__ = 'CreateBy_g84114734'
import os
plmn = ['11111','22222','33333','44444','5555']

dict_11111 = {'sctplnk':'a', 'ippath':'f', 'sctppeer':'k', 'userpeer':'p'}
dict_22222 = {'sctplnk':'b', 'ippath':'g', 'sctppeer':'l', 'userpeer':'q'}
dict_33333 = {'sctplnk':'c', 'ippath':'h', 'sctppeer':'m', 'userpeer':'r'}
dict_44444 = {'sctplnk':'d', 'ippath':'i', 'sctppeer':'n', 'userpeer':'s'}
dict_5555 = {'sctplnk':'e', 'ippath':'j', 'sctppeer':'o', 'userpeer':'t'}
dicts = {'dict_11111':dict_11111, 'dict_22222':dict_22222, 'dict_33333':dict_33333, 'dict_44444':dict_44444, 'dict_5555':dict_5555}

str = r'''
***************************NR侧修改脚本***************************
MOD GNBOPERATOR: OperatorId=0,  OperatorName="{6}", Mcc="{0}", Mnc="{1}", NrNetworkingOption=SA_NSA;
MOD USERPLANEPEER: UPPEERID=1, IPVERSION=IPv4, PEERIPV4="{2}";
MOD IPRT: RTIDX=1, DSTIP="{2}", FORCEEXECUTE=YES;
MOD SCTPPEER: SCTPPEERID=1, IPVERSION=IPv4, SIGIP1V4="{3}";
MOD USERPLANEPEER: UPPEERID=2, IPVERSION=IPv4, PEERIPV4="{4}";
MOD IPRT: RTIDX=3, DSTIP="{3}", FORCEEXECUTE=YES;
MOD IPRT: RTIDX=4, DSTIP="{4}", FORCEEXECUTE=YES;
RST APP: AID=1, FOCRST=YES;
***************************------NR侧修改脚本完成------***************************
-!-!-!-!-!-!-!-!-!-!-!-!-!-!---LTE侧修改脚本---!-!-!-!-!-!-!-!-!-!-!-!-!-!-
MOD CNOPERATOR: CnOperatorId=0, CnOperatorName="{6}", Mcc="{0}", Mnc="{1}";
MOD SCTPLNK: SCTPNO=0, IPVERSION=IPv4, PEERIP="{5}";
MOD IPPATH: PATHID=0, PEERIP="{2}";
MOD IPRT: RTIDX=0, DSTIP="{5}", FORCEEXECUTE=YES;
MOD IPRT: RTIDX=1, DSTIP="{2}", FORCEEXECUTE=YES;
RST APP: AID=1, FOCRST=YES;
-!-!-!-!-!-!-!-!-!-!-!-!-!-!---LTE侧修改脚本完成---!-!-!-!-!-!-!-!-!-!-!-!-!-!-
'''
a = len(plmn)
print("- - - - - - - - - - - - - - - - PLMN修改器 V0.03 - - - - - - - - - - - - - - - - \n")
print("1. 修改为11111")
print("2. 修改为22222")
print("3. 修改为33333")
print("4. 修改为11111PLMN下与SA互操作的核心网")
# print("5. 修改为33333PLMN下与SA互操作的核心网")
print("5. 修改为5555")
print("6. 退出")

while True:
    num = int(input("请输入要操作的序号：\n"))
    if num == 6:
        break
    if num >= 0 and num <6:
        i = num -1
        pl =plmn[i]
        dic = 'dict_' + pl
        for d in dicts.keys():
            if dic == d:
                dict_temp = dicts.get(d)
                print(str.format(pl[0:3],pl[3:5],dict_temp['ippath'],dict_temp['sctppeer'],dict_temp['userpeer'],dict_temp['sctplnk'],pl))
                break
        # print(str.format(pl[0:3],pl[3:5],dic['ippath'],dic['sctppeer'],dic['userpeer'],dic['sctplnk'],pl))
    else:
        print("输入错误，请重新输入")

os.system("pause")
