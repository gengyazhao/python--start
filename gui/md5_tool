#!/usr/bin
# _*_ coding: UTF-8 _*_
# Copyright (c) 2021 GengYu.All rights reserved
# @Create by gengyu
# @Create Time :2021/12/19
# @File Name : md5_tool
# 打包命令 pyinstaller -F package\md5_tool
"""

"""
__author__ = 'Administrator'
from tkinter import *
import hashlib
import time
import doctest

LOG_LINE_NUM = 0
class My_Gui():
    def __init__(self, init_window_name):
        self.init_window_name = init_window_name

    #config window
    def set_init_window(self):
        #set window name
        self.init_window_name.title("text processing tools_v1.1")
        #set window size
        self.init_window_name.geometry("1068x681+200+200")
        #set window background color
        self.init_window_name["bg"] = "pink"
        self.init_data_lable = Label(self.init_window_name, text = "待处理数据")
        self.init_data_lable.grid(row=0, column=0)
        self.result_data_lable = Label(self.init_window_name, text = "输出结果")
        self.result_data_lable.grid(row=0, column=12)
        self.log_lable = Label(self.init_window_name, text = "日志")
        self.log_lable.grid(row=12,column=0)

        #文本框
        self.init_data_text = Text(self.init_window_name,width=67,height=20)#原始数据录入框
        self.init_data_text.grid(row=1,column=0,rowspan=10,columnspan=10)
        self.result_data_text = Text(self.init_window_name,width=67,height=30)#显示处理结果
        self.result_data_text.grid(row=1,column=12,rowspan=15,columnspan=10)
        self.log_data_text = Text(self.init_window_name,width=67,height=10)
        self.log_data_text.grid(row=13,column=0,columnspan=10)
        #button
        self.str_trans_to_md5_button = Button(self.init_window_name,text='字符串转MD5',bg="lightblue",
                                              width=10,command=self.str_trans_to_md5)#调用内部方法，加（）为直接调用
        self.str_trans_to_md5_button.grid(row=1,column=11)

        #功能函数
    def str_trans_to_md5(self):
        src = self.init_data_text.get(1.0,END).strip().replace("\n","").encode("utf-8")
        if src:
            try:
                myMd5 = hashlib.md5()
                myMd5.update(src)
                myMd5_Digest = myMd5.hexdigest()
                #输出到界面
                self.result_data_text.delete(1.0,END)
                self.result_data_text.insert(1.0,myMd5_Digest)
                self.write_log_to_text("INFO:str_trans_to_md5 success")
            except:
                self.result_data_text.delete(1.0,END)
                self.result_data_text.insert(1.0,"字符串转MD5失败")
        else:
            self.write_log_to_text("ERROR:str_trans_to_md5 failed")

    #get current time
    def get_current_time(self):
        #注意大小写
        current_time = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(time.time()))
        return current_time
    #日志函数
    def write_log_to_text(self,logmsg):
        global LOG_LINE_NUM
        current_time = self.get_current_time()
        logmsg_in = str(current_time) + " " + str(logmsg) + "\n"
        if LOG_LINE_NUM <= 7:
            self.log_data_text.insert(END,logmsg_in)
            LOG_LINE_NUM += 1
        else:
            self.log_data_text.delete(1.0,2.0)
            self.log_data_text.insert(END,logmsg_in)

def gui_start():
    init_window = Tk()#实例化一个父窗口
    win = My_Gui(init_window)
    win.set_init_window()
    init_window.mainloop()#保持父窗口运行


if __name__ == "__main__":
    gui_start()
