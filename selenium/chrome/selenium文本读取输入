#!/usr/bin
# _*_ coding: UTF-8 _*_
# Copyright (c) 2021 GengYu.All rights reserved
# @Create By g84114734
# @Create_time: 2025/8/18
# @File Name: Apus_Ate
# 打包命令pyinstaller -F package\Apus_Ate
"""
这个模块提供了

"""
__author__ = 'gyz'


import chrome_Driver
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.keys import Keys
import time
import os
import sys
import openpyxl
# ATE网址
url = "http://xxx"
# 执行机小网IP地址
# 获取当前目录
base_path = os.getcwd()
# 小区信息文件目录
nr_cell_path = base_path + r'\xxx'
# 用户名
user = "123456"
# 密码
pwd = "456123"



# 定义映射关系，将Excel列名映射到函数参数名
column_mapping = {
    "小区名": "cell_name",
    "槽位号": "slot_num",
    "小区号": "phycell_id",
    "主下行频点": "DlNarfcn",
    "小区收发能力": "trx",
    "本地小区号": "sector_info"
}

# LTE小区SectorInfo
sector_list = [
"0,4,0:60:0:R0A,0:60:0:R0B,0:60:0:R0C,0:60:0:R0D",
"1,4,0:61:0:R0A,0:61:0:R0B,0:61:0:R0C,0:61:0:R0D",
]


def login():
    # 访问ATE地址
    driver = chrome_Driver.get_driver(url)
    # 定位元素，输入用户名
    driver.find_element(By.NAME, "UserName").send_keys(user)
    # 定位元素，输入密码
    driver.find_element(By.NAME, "Password").send_keys(pwd)
    # 定位元素，点击login按钮
    driver.find_element(By.XPATH, "/html/body/div[1]/div/div/section/form/div[3]/input").click()
    # 跳转页面
    driver.switch_to.window(driver.window_handles[-1])
    # 定位元素，点击 ATE 配置管理系统
    driver.find_element(By.LINK_TEXT, "xxx").click()
    # 跳转页面
    driver.switch_to.window(driver.window_handles[-1])
    # 输入执行机小网IP地址
    driver.find_element(By.NAME, "IntraIP").send_keys(node_ip)
    # 点击选择所属地域
    driver.find_element(By.CLASS_NAME, 'layui-edge').click()
    # 地域选择北京
    driver.find_element(By.XPATH, '//*[@id="form-div"]/div/div/div/div/div/form/div[1]/div[2]/div/div/dl/dd[2]').click()
    # 点击登录环境按钮
    driver.find_element(By.CLASS_NAME, 'layui-btn').click()
    # 跳转页面
    driver.switch_to.window(driver.window_handles[-1])
    return driver


def NRCell(driver, cell_name, slot_num, phycell_id, DlNarfcn, trx, sector_info):
    driver.find_element(By.LINK_TEXT, '5G小区').click()
    cell_name.strip()
    if cell_name.__len__() > 0:
        # 定位ModemId
        el = driver.find_element(By.XPATH, f'//*[@id="table-%s"]/tbody/tr[6]/td[2]' % cell_name)
        ActionChains(driver).double_click(el).perform()
        time.sleep(2)
        el = driver.find_element(By.XPATH, f'//*[@id="table-%s"]/tbody/tr[6]/td[2]/input' % cell_name)
        el.clear()
        el.send_keys("0,1")
        # 定位IsNsa
        el = driver.find_element(By.XPATH, f'//*[@id="table-%s"]/tbody/tr[23]/td[2]' % cell_name)
        ActionChains(driver).double_click(el).perform()
        time.sleep(2)
        driver.find_element(By.XPATH, f'//*[@id="table-%s"]/tbody/tr[23]/td[2]/select' % cell_name).click()
        driver.find_element(By.XPATH, f'//*[@id="table-%s"]/tbody/tr[23]/td[2]/select/option[3]' % cell_name).click()
        # 定位“提交”按钮并点击
        driver.find_element(By.XPATH, '//*[@id="table-%s"]/tbody/tr[27]/td[1]/button' % cell_name).click()
        time.sleep(2)
        driver.switch_to.alert.accept()
        time.sleep(1)


def LTECell(driver, cell_name, slot_num, phycell_id, DlNarfcn, trx, sector_info):
    driver.find_element(By.LINK_TEXT, 'LTE小区').click()
    cell_name.strip()
    if cell_name.__len__() > 0:
        # 定位ModemId
        el = driver.find_element(By.XPATH, f'//*[@id="table-%s"]/tbody/tr[6]/td[2]' % cell_name)
        ActionChains(driver).double_click(el).perform()
        time.sleep(2)
        el = driver.find_element(By.XPATH, f'//*[@id="table-%s"]/tbody/tr[6]/td[2]/input' % cell_name)
        el.clear()
        el.send_keys("0,1")
        # 选择IsNsa
        el = driver.find_element(By.XPATH, f'//*[@id="table-%s"]/tbody/tr[22]/td[2]' % cell_name)
        ActionChains(driver).double_click(el).perform()
        time.sleep(2)
        driver.find_element(By.XPATH, f'//*[@id="table-%s"]/tbody/tr[22]/td[2]/select' % cell_name).click()
        driver.find_element(By.XPATH, f'//*[@id="table-%s"]/tbody/tr[22]/td[2]/select/option[2]' % cell_name).click()
        # 定位SectorInfo
        el = driver.find_element(By.XPATH, f'//*[@id="table-%s"]/tbody/tr[24]/td[2]' % cell_name)
        ActionChains(driver).double_click(el).perform()
        time.sleep(2)
        el = driver.find_element(By.XPATH, f'//*[@id="table-%s"]/tbody/tr[24]/td[2]/input' % cell_name)
        el.clear()
        el.send_keys(sector_list[sector_info])
        # # 定位“提交”按钮并点击
        driver.find_element(By.XPATH, '//*[@id="table-%s"]/tbody/tr[27]/td[1]/button' % cell_name).click()
        time.sleep(2)
        driver.switch_to.alert.accept()
        time.sleep(1)


def read_cell_info_write_toate(driver, sheet_name):
    # Excel文件路径
    # 点击AN网元信息管理
    driver.find_element(By.LINK_TEXT, "xxx").click()
    # 加载工作簿和工作表
    try:
        workbook = openpyxl.load_workbook(file_path)
        sheet = workbook[sheet_name]  # 获取活跃工作表
        # 获取表头
        headers = [cell.value for cell in sheet[1]]
        # 验证表头与映射匹配
        if len(headers) != len(column_mapping):
            print(f"Warning: Number of headers ({len(headers)}) doesn't match expected columns ({len(column_mapping)})")

        # 处理数据行
        for row in sheet.iter_rows(min_row=2, values_only=True):
            if len(row) != len(headers):
                print(f"Warning: Row has {len(row)} values, expected {len(headers)}")
                continue

            # 创建参数字典
            params = {}
            for i, value in enumerate(row):
                header = headers[i]
                if header in column_mapping:
                    # 转换值类型（根据需要调整）
                    try:
                        # 尝试转换为整数
                        params[column_mapping[header]] = int(value) #if value.isdigit() else value
                    except ValueError:
                        if 'CELL' in value:
                            params[column_mapping[header]] = value
                        else:
                            params[column_mapping[header]] = value[0]

            # 检查是否所有必需参数都有值
            required_params = {"cell_name", "slot_num", "phycell_id", "DlNarfcn", "trx", "sector_info"}
            if not required_params.issubset(params.keys()):
                missing = required_params - set(params.keys())
                print(f"Warning: Missing parameters {missing} for row {row}")
                continue

            # 调用NRCell函数
            if 'gNodeB' in params["cell_name"]:
                try:
                    NRCell(
                        driver=driver,
                        cell_name=params["cell_name"],
                        slot_num=params["slot_num"],
                        phycell_id=params["phycell_id"],
                        DlNarfcn=params["DlNarfcn"],
                        trx=params["trx"],
                        sector_info=params["sector_info"]
                    )
                except Exception as e:
                    print(f"Error creating NRCell for row {row}: {e}")
                    continue
            if 'eNodeB' in params["cell_name"]:
                try:
                    LTECell(
                        driver=driver,
                        cell_name=params["cell_name"],
                        slot_num=params["slot_num"],
                        phycell_id=params["phycell_id"],
                        DlNarfcn=params["DlNarfcn"],
                        trx=params["trx"],
                        sector_info=params["sector_info"]
                    )
                except Exception as e:
                    print(f"Error creating LTECell for row {row}: {e}")
                    continue
    except Exception as e:
        print(f"Error read cell_info {e}")
    return driver


def set_common_config(driver):
    driver.find_element(By.LINK_TEXT, "xxx").click()
    time.sleep(2)
    driver.find_element(By.LINK_TEXT, "xxx").click()
    el = driver.find_element(By.ID, "UETxRxMode")
    ActionChains(driver).double_click(el).perform()
    time.sleep(2)
    driver.find_element(By.NAME, "UETxRxMode").click()
    # 设置UETxRxMode为2t4R
    driver.find_element(By.XPATH, '//*[@id="UETxRxMode"]/select/option[5]').click()
    time.sleep(1)
    driver.find_element(By.NAME, 'modUePolicyData').click()
    time.sleep(2)
    driver.switch_to.alert.accept()
    time.sleep(1)
    # Lte测试策略
    driver.find_element(By.XPATH, '//*[@id="sidebar-menu"]/div/ul/li[2]/ul/li[2]/a').click()
    time.sleep(2)
    driver.switch_to.frame('iframStrategy')
    # LTE小区主天线收发模式
    driver.find_element(By.XPATH,
                        '//*[@id="menu"]/div/div[2]/div[2]/table/tbody/tr[7]/td[2]/div/div/div/input').click()
    driver.find_element(By.XPATH,
                        '//*[@id="menu"]/div/div[2]/div[2]/table/tbody/tr[7]/td[2]/div/div/dl/dd[2]').click()
    driver.find_element(By.XPATH, '//*[@id="menu"]/div/div[1]/div[1]/div/button').click()
    time.sleep(1)
    # LTE小区辅天线收发模式
    driver.find_element(By.XPATH,
                        '//*[@id="right"]/div/div[2]/div[2]/table/tbody/tr[7]/td[2]/div/div/div/input').click()
    driver.find_element(By.XPATH,
                        '//*[@id="right"]/div/div[2]/div[2]/table/tbody/tr[7]/td[2]/div/div/dl/dd[2]').click()
    driver.find_element(By.XPATH, '//*[@id="right"]/div/div[1]/div[1]/div/button').click()
    time.sleep(1)

    driver.switch_to.default_content()
    driver.find_element(By.LINK_TEXT, 'xxx').click()
    time.sleep(1)
    driver.switch_to.frame('iframStrategy')
    # DlModulation
    driver.find_element(By.XPATH,
                        '//*[@id="menu"]/div/div[2]/div[2]/table/tbody/tr[13]/td[2]/div/div/div/input').click()
    driver.find_element(By.XPATH, '//*[@id="menu"]/div/div[2]/div[2]/table/tbody/tr[13]/td[2]/div/div/dl/dd[2]').click()
    driver.find_element(By.XPATH, '//*[@id="menu"]/div/div[1]/div[1]/div/button').click()
    time.sleep(1)
    # DlModulation
    driver.find_element(By.XPATH,
                        '//*[@id="right"]/div/div[2]/div[2]/table/tbody/tr[13]/td[2]/div/div/div/input').click()
    driver.find_element(By.XPATH, '//*[@id="right"]/div/div[2]/div[2]/table/tbody/tr[13]/td[2]/div/div/dl/dd[2]').click()
    driver.find_element(By.XPATH, '//*[@id="right"]/div/div[1]/div[1]/div/button').click()
    time.sleep(1)

    # Wmn公共测试策略
    driver.switch_to.default_content()
    driver.find_element(By.LINK_TEXT, 'xxx').click()
    time.sleep(1)
    driver.find_element(By.LINK_TEXT, 'xxx').click()
    time.sleep(1)
    driver.switch_to.frame('iframStrategy')
    # uladditionaldmrspos
    driver.find_element(By.XPATH,
                        '//*[@id="menu"]/div[1]/div[2]/div[2]/table/tbody/tr[5]/td[2]/div/div/div/input').click()
    driver.find_element(By.XPATH,
                        '//*[@id="menu"]/div[1]/div[2]/div[2]/table/tbody/tr[5]/td[2]/div/div/dl/dd[2]').click()
    # NrDuCellRestoreTime
    cell = driver.find_element(By.XPATH, '//*[@id="menu"]/div[1]/div[2]/div[2]/table/tbody/tr[10]/td[2]')
    ActionChains(driver).double_click(cell).perform()
    time.sleep(2)
    driver.find_element(By.XPATH, '//*[@id="menu"]/div[1]/div[2]/div[2]/table/tbody/tr[10]/td[2]/input').send_keys("60")
    driver.find_element(By.XPATH, '//*[@id="menu"]/div[1]/div[1]/div[1]/div/button').click()
    time.sleep(1)
    # eNodeB UU
    driver.find_element(By.XPATH,
                        '//*[@id="right"]/div[1]/div[2]/div[2]/table/tbody/tr[1]/td[3]/div/div/div/input').click()
    time.sleep(1)
    driver.find_element(By.XPATH,
                        '//*[@id="right"]/div[1]/div[2]/div[2]/table/tbody/tr[1]/td[3]/div/div/dl/dd[2]').click()
    # eNodeB L1 Log大小(M)
    el = driver.find_element(By.XPATH, '//*[@id="right"]/div[1]/div[2]/div[2]/table/tbody/tr[2]/td[4]/div')
    ActionChains(driver).double_click(el).perform()
    time.sleep(2)
    driver.find_element(By.XPATH, '//*[@id="right"]/div[1]/div[2]/div[2]/table/tbody/tr[2]/td[4]/input').send_keys(
        '100')
    # 提交修改
    driver.find_element(By.XPATH, '//*[@id="right"]/div[1]/div[1]/div[1]/div/button').click()
    time.sleep(1)
    driver.switch_to.default_content()
    return driver


def data_config(driver, console_ip, slot_num, client_port, server_port, server_ip, server_gateway_ip, server_mac, client_mac,
                ugw_mac, multi_stream_ip):
    driver.find_element(By.LINK_TEXT, 'xxx').click()
    time.sleep(1)
    el = driver.find_element(By.XPATH, '//*[@id="DeviceType"]')
    ActionChains(driver).double_click(el).perform()
    time.sleep(1)
    driver.find_element(By.XPATH, '//*[@id="DeviceType"]/select').click()
    driver.find_element(By.XPATH, '//*[@id="DeviceType"]/select/option[2]').click()

    el = driver.find_element(By.XPATH, '//*[@id="UPLinkSendNode"]')
    ActionChains(driver).double_click(el).perform()
    time.sleep(1)
    driver.find_element(By.XPATH, '//*[@id="UPLinkSendNode"]/select').click()
    driver.find_element(By.XPATH, '//*[@id="UPLinkSendNode"]/select/option[2]').click()

    el = driver.find_element(By.XPATH, '//*[@id="DropFlag"]')
    ActionChains(driver).double_click(el).perform()
    time.sleep(1)
    driver.find_element(By.XPATH, '//*[@id="DropFlag"]/select').click()
    driver.find_element(By.XPATH, '//*[@id="DropFlag"]/select/option[2]').click()
    driver.find_element(By.XPATH, '//*[@id="table-DataDeviceType"]/tbody/tr[8]/td[1]/button').click()
    time.sleep(2)
    driver.switch_to.alert.accept()
    time.sleep(1)

    el = driver.find_element(By.XPATH, '//*[@id="table-IXIA"]/tbody/tr[4]/td[2]')
    ActionChains(driver).double_click(el).perform()
    input_el = driver.find_element(By.XPATH, '//*[@id="table-IXIA"]/tbody/tr[4]/td[2]/input')
    input_el.clear()
    time.sleep(1)
    input_el.send_keys(console_ip)
    driver.find_element(By.XPATH, '//*[@id="table-IXIA"]/tbody/tr[16]/td[1]/button').click()
    time.sleep(2)
    driver.switch_to.alert.accept()
    time.sleep(1)


# 数传配置
def read_excel_and_process(driver, sheet_name):
    """读取Excel并处理数据"""
    wb = openpyxl.load_workbook(file_path)
    sheet = wb[sheet_name]

    # 获取表头（第一行）
    headers = [cell.value for cell in sheet[1]]

    # 从第二行开始读取数据
    for row in sheet.iter_rows(min_row=2, values_only=True):
        # 提取各字段
        data = dict(zip(headers, row))

        # 合并多流IP（用分号连接）
        multi_stream_ips = [
            data.get("多流IP-1", ""),
            data.get("多流IP-2", ""),
            data.get("多流IP-3", ""),
            data.get("多流IP-4", "")
        ]
        multi_stream_ip = ";".join(filter(None, multi_stream_ips))  # 过滤空值

        # 调用data_config函数
        data_config(
            driver=driver,
            console_ip=data.get("ConsoleIP"),
            slot_num=data.get("槽号"),
            client_port=data.get("Client端端口号"),
            server_port=data.get("Server端口号"),
            server_ip=data.get("Server端 IP"),
            server_gateway_ip=data.get("Server 端网关地址"),
            server_mac=data.get("Server端MAC地址"),
            client_mac=data.get("Client端MAC地址"),
            ugw_mac=data.get("UGW MAC地址"),
            multi_stream_ip=multi_stream_ip
        )
    return driver


def set_attenuator(driver, dict_attenuators):
    attenuator_num = len(dict_attenuators)
    driver.find_element(By.LINK_TEXT, 'xxx').click()
    time.sleep(1)
    for i in range(1, attenuator_num+1):
        el = driver.find_element(By.XPATH, f'//*[@id="table-Attenuator%s"]/tbody/tr[6]/td[2]' % i)
        AttChnlOut = dict_attenuators[el.text]
        el = driver.find_element(By.XPATH, f'//*[@id="table-Attenuator%s"]/tbody/tr[7]/td[2]' % i)
        ActionChains(driver).double_click(el).perform()
        time.sleep(1)
        el = driver.find_element(By.XPATH, f'//*[@id="table-Attenuator%s"]/tbody/tr[7]/td[2]/input' % i)
        el.clear()
        el.send_keys(AttChnlOut)
        driver.find_element(By.XPATH, f'//*[@id="table-Attenuator%s"]/tbody/tr[10]/td[1]/button' % i).click()
        time.sleep(2)
        driver.switch_to.alert.accept()
        time.sleep(1)


def read_and_merge_attenuators():
    # 加载工作簿和工作表
    wb = openpyxl.load_workbook(filename=file_path)
    sheet = wb['attenuators']

    attenuators = {}

    # 跳过第一行标题行，从第二行开始读取
    for row in sheet.iter_rows(min_row=2, values_only=True):
        vam_ip = row[0]
        out_ports = row[1]

        # 如果VAMip已存在，则将OUT口追加到现有值中
        if vam_ip in attenuators:
            attenuators[vam_ip] += f",{out_ports}"
        else:
            attenuators[vam_ip] = out_ports

    return attenuators


def set_mbts_cell(driver, ucell_list, gcell_list):
    driver.find_element(By.LINK_TEXT, "xxx").click()
    time.sleep(1)
    driver.find_element(By.LINK_TEXT, 'WCDMA小区').click()
    time.sleep(1)
    for ucell in ucell_list:
        u_cell(driver, ucell)
    print("Ucell complete")
    driver.find_element(By.LINK_TEXT, 'GSM小区').click()
    time.sleep(1)
    for gcell in gcell_list:
        g_cell(driver, gcell)
    print("Gcell complete")
    return driver


def u_cell(driver, ucell_name):
    el = driver.find_element(By.XPATH, f'//*[@id="table-%s"]/tbody/tr[22]/td[2]' % ucell_name)
    ATTOutPort = el.text
    el = driver.find_element(By.XPATH, f'//*[@id="table-%s"]/tbody/tr[23]/td[2]' % ucell_name)
    ActionChains(driver).double_click(el).perform()
    time.sleep(1)
    el = driver.find_element(By.XPATH, f'//*[@id="table-%s"]/tbody/tr[23]/td[2]/input' % ucell_name)
    el.clear()
    el.send_keys(ATTOutPort)
    driver.find_element(By.XPATH, f'//*[@id="table-%s"]/tbody/tr[31]/td[1]/button' % ucell_name).click()
    time.sleep(1)
    driver.switch_to.alert.accept()
    time.sleep(1)


def g_cell(driver, gcell_name):
    ATTOutPort = driver.find_element(By.XPATH, f'//*[@id="table-%s"]/tbody/tr[18]/td[2]' % gcell_name).text
    el = driver.find_element(By.XPATH, f'//*[@id="table-%s"]/tbody/tr[19]/td[2]' % gcell_name)
    ActionChains(driver).double_click(el).perform()
    time.sleep(1)
    el = driver.find_element(By.XPATH, f'//*[@id="table-%s"]/tbody/tr[19]/td[2]/input' % gcell_name)
    el.clear()
    el.send_keys(ATTOutPort)
    driver.find_element(By.XPATH, f'//*[@id="table-%s"]/tbody/tr[27]/td[1]/button' % gcell_name).click()
    time.sleep(1)
    driver.switch_to.alert.accept()
    time.sleep(1)


if __name__ == '__main__':
    node_ip = "xxxx"
    file_path = r"D:\xxxx.xlsx"
    sheet_name_ixia = "x"
    sheet_name_cell_info = 'xx'
    sheet_name_attenuators = 'xxx'
    driver = login()
    driver = set_common_config(driver)
    driver = read_cell_info_write_toate(driver, sheet_name_cell_info)
    gu_cell = r'''

        '''
    u_cell_list = []
    g_cell_list = []

    gu_cell_list = gu_cell.splitlines()[1:]
    for cell in gu_cell_list:
        if 'UCell' in cell:
            u_cell_list.append(cell.strip(' '))
        elif 'GCell' in cell:
            g_cell_list.append(cell.strip(' '))
        else:
            print(cell)
    driver = set_mbts_cell(driver, u_cell_list, g_cell_list)
    driver = read_excel_and_process(driver, sheet_name_ixia)
    try:
        # 读取并合并数据
        attenuators_dict = read_and_merge_attenuators()

        # 打印合并后的结果（调试用）
        print("合并后的衰减器数据:")
        for ip, ports in attenuators_dict.items():
            print(f"{ip}\t{ports}")

        # 将数据传递给set_attenuator函数
        set_attenuator(driver, attenuators_dict)

    except FileNotFoundError:
        print(f"错误：文件未找到 - {file_path}")
    except Exception as e:
        print(f"发生错误: {str(e)}")
